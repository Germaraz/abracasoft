/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pantallas;

import gestores.GestorCliente;
import gestores.GestorPago;
import gestores.GestorVenta;
import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import static java.lang.Float.parseFloat;
import static java.lang.Integer.parseInt;
import static java.lang.String.valueOf;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author German
 */
public class GestionProveedores extends javax.swing.JFrame {
    

    /**
     * Creates new form GestinonCliente
     */
    public GestionProveedores() {
        AparienciaPantalla apa = new AparienciaPantalla();
        apa.cambiarApariencia("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        initComponents();
        buscarMientrasEscribe();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DarBajajButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProveedoresjTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        ComprasjTable = new javax.swing.JTable();
        PagoComprajButton = new javax.swing.JButton();
        NuevoProveedorjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboFiltro = new javax.swing.JComboBox<>();
        txtFiltro = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion de clientes");
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(713, 510));

        DarBajajButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DarBajajButton.setText("Dar de baja proveedor/es seleccionados");
        DarBajajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DarBajajButtonActionPerformed(evt);
            }
        });

        ProveedoresjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "CUIT", "Razon Social", "Nombre de Fantasia", "DirecciÃ³n", "Localidad", "Provincia", "Telefono", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProveedoresjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProveedoresjTableMouseClicked(evt);
            }
        });
        ProveedoresjTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ProveedoresjTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(ProveedoresjTable);
        if (ProveedoresjTable.getColumnModel().getColumnCount() > 0) {
            ProveedoresjTable.getColumnModel().getColumn(0).setMinWidth(30);
            ProveedoresjTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            ProveedoresjTable.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        ComprasjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Compra", "Fecha", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ComprasjTable);

        PagoComprajButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        PagoComprajButton.setText("Agregar pago");
        PagoComprajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PagoComprajButtonActionPerformed(evt);
            }
        });

        NuevoProveedorjButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NuevoProveedorjButton.setText("Nuevo Proveedor");
        NuevoProveedorjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoProveedorjButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Buscar por:");

        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre de Fantasia", "Razon Social" }));
        comboFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboFiltroActionPerformed(evt);
            }
        });

        txtFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFiltroActionPerformed(evt);
            }
        });
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltroKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(NuevoProveedorjButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DarBajajButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                        .addComponent(PagoComprajButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(NuevoProveedorjButton)
                    .addComponent(DarBajajButton)
                    .addComponent(PagoComprajButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NuevoProveedorjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoProveedorjButtonActionPerformed
        // TODO add your handling code here:
        new AltaCliente().setVisible(true);
    }//GEN-LAST:event_NuevoProveedorjButtonActionPerformed

    private void DarBajajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DarBajajButtonActionPerformed
        eliminarCliente();
    }//GEN-LAST:event_DarBajajButtonActionPerformed

    private void ProveedoresjTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProveedoresjTableKeyReleased
        clienteVentaPago();
        saldoCliente();
    }//GEN-LAST:event_ProveedoresjTableKeyReleased

    private void ProveedoresjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProveedoresjTableMouseClicked
        clienteVentaPago();
        saldoCliente();
    }//GEN-LAST:event_ProveedoresjTableMouseClicked

    private void PagoComprajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PagoComprajButtonActionPerformed
        agregarPagoCliente();
    }//GEN-LAST:event_PagoComprajButtonActionPerformed

    private void comboFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboFiltroActionPerformed

    private void txtFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFiltroActionPerformed

    private void txtFiltroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyTyped
        // TODO add your handling code here:
        txtFiltro.addKeyListener(new KeyAdapter() {
            public void keyReleased(final KeyEvent e) {
                String cadena = (txtFiltro.getText());
                txtFiltro.setText(cadena);
                repaint();
                filtro();
            }
        });
        trsFiltro = new TableRowSorter(tablaUsuarios.getModel());
        tablaUsuarios.setRowSorter(trsFiltro);
    }//GEN-LAST:event_txtFiltroKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionProveedores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ComprasjTable;
    private javax.swing.JButton DarBajajButton;
    private javax.swing.JButton NuevoProveedorjButton;
    private javax.swing.JButton PagoComprajButton;
    private javax.swing.JTable ProveedoresjTable;
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
    private String paraBuscar="";
            
            

    private void buscarMientrasEscribe() {
        paraBuscar = TFbusquedaCliente.getText();
        DefaultTableModel tabla = (DefaultTableModel) ProveedoresjTable.getModel();
        if (GestorCliente.ConsultaPorDescripcion(paraBuscar).size() != 0) {
            for (int i = 0; i < GestorCliente.ConsultaPorDescripcion(paraBuscar).size(); i++) {
                Object[] fila = {GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getIdCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getNombreCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getDireccionCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getMailCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getCodigoPostalCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getTelefonoCliente(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getDniCuilCuit(),
                    GestorCliente.ConsultaPorDescripcion(paraBuscar).get(i).getEsatdo(),
                };
                tabla.addRow(fila);
            }
        }
    }
    
    private void borrarRenglones(int jpanel){
        int a;
        DefaultTableModel tabla;
        if (jpanel == 1){
            tabla = (DefaultTableModel) ProveedoresjTable.getModel();
            a = ProveedoresjTable.getRowCount() - 1;
        }else{
            tabla = (DefaultTableModel) ComprasjTable.getModel();
            a = ComprasjTable.getRowCount() - 1;
        }
        for (int i = a; i >= 0; i--) {
            tabla.removeRow(i); //se van borrando para que solo muestre el producto que se buscÃ³
        }
    }

    private void eliminarCliente() {
        if(ProveedoresjTable.getSelectedRows().length > 0 ) {
            int valorCelda = 0;
            try{
                valorCelda = parseInt(ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),0).toString());
            }catch (NumberFormatException e){
                System.out.println("no se pudo determinar el ID del cliente");
            }
            if(valorCelda != 0){
                DefaultTableModel tcliente = (DefaultTableModel) ProveedoresjTable.getModel();
                int confirmado = JOptionPane.showConfirmDialog(DarBajajButton, 
                    "Â¿Confirma que desea borrar el cliente: " + 
                    ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),1).toString() + " ?");

                if (JOptionPane.OK_OPTION == confirmado){
                    if (GestorCliente.eliminarCliente(valorCelda)==true){
                        JOptionPane.showMessageDialog(null, "El cliente fue eliminado");
                        borrarRenglones(1);
                        buscarMientrasEscribe();
                    }else{
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar el cliente");
                    }
                }else{
                   System.out.println("no se elimino nada");
                }
            }
         }
    }
    
    private void clienteVentaPago() {
        if(ProveedoresjTable.getSelectedRows().length > 0 ) {
            int valorCelda = 0;
            try{
                valorCelda = parseInt(ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),0).toString());
            }catch (NumberFormatException e){ 
            }
            borrarRenglones(2);
            if(valorCelda != 0){
                DefaultTableModel cliVenPag = (DefaultTableModel) ComprasjTable.getModel();
                for (int i = 0; i < GestorVenta.cuentaVentaCliente(valorCelda).size(); i++) {
                    Object [] fila = {
                        GestorVenta.cuentaVentaCliente(valorCelda).get(i).getMontoPagoVenta(),
                        "",
                        GestorVenta.cuentaVentaCliente(valorCelda).get(i).getFechaDeVenta()
                    };
                    cliVenPag.addRow(fila);
                }
                for (int i = 0; i < GestorPago.cuentaPagoCliente(valorCelda).size(); i++)  {
                    Object [] fila2 = {
                        "",
                        GestorPago.cuentaPagoCliente(valorCelda).get(i).getPagoCliente(),
                        GestorPago.cuentaPagoCliente(valorCelda).get(i).getFechaPagoCliente()
                    };
                    cliVenPag.addRow(fila2);
                    TableRowSorter<TableModel> ordenar = new TableRowSorter<TableModel>(cliVenPag);
                    ordenar.toggleSortOrder(1);
                    ordenar.toggleSortOrder(1);
                    ordenar.toggleSortOrder(2);
                    ordenar.toggleSortOrder(2); // esto tiene que estar dos veces para que lo ordene de mayor a menor
                    ComprasjTable.setRowSorter(ordenar);
                }
            }
        }
    }
    
    private void saldoCliente(){
        float ventas = 0;
        float pagos = 0;
        
        DefaultTableModel cliVenPag = (DefaultTableModel) ComprasjTable.getModel();
        
        if (cliVenPag.getRowCount()!=0){
            for (int i = 0; i< cliVenPag.getRowCount(); i++){
                try {
                    ventas += parseFloat(cliVenPag.getValueAt(i, 0).toString());
                }catch (NumberFormatException e){
                }
                try {
                    pagos += parseFloat(cliVenPag.getValueAt(i, 1).toString());
                }catch (NumberFormatException e){
                }
            }
        }
        float total=((ventas-pagos)*-1);
        if (total<0) {
            saldoCliente.setForeground(Color.RED);
        
        }else{
            saldoCliente.setForeground(Color.BLACK);
        }
        saldoCliente.setText("SALDO: "+valueOf((ventas-pagos)*-1));
    }
    
    private void abrirAyuda(){
        try {
            //File file = new File(System.getProperty("user.dir") + "\\src\\ayuda\\Manual_Gestion_Clientes.pdf");
            //Desktop.getDesktop().open(file);
            
            if (Desktop.isDesktopSupported()) {
            File file = new File("Ayuda_Gestion_Cliente.pdf");
            if (!file.exists()) {
                InputStream inputStream = ClassLoader.getSystemClassLoader()
                                    .getResourceAsStream("ayuda/Ayuda_Gestion_Cliente.pdf");
                OutputStream outputStream = new FileOutputStream(file);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = inputStream.read(buffer)) > 0) {
                    outputStream.write(buffer, 0, length);
                }
                outputStream.close();
                inputStream.close();
            }
            Desktop.getDesktop().open(file);
            }
            
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, "No se puedo abrir el archivo de ayuda");
        }
    }

    private void modificarCliente() {
        if(ProveedoresjTable.getSelectedRows().length > 0 ) {
            int valorCelda = 0;
            try{
                valorCelda = parseInt(ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),0).toString());
            }catch (NumberFormatException e){
                System.out.println("no se pudo determinar el codigo de cliente");
            }
            if(valorCelda != 0){
                DefaultTableModel dtmCliente = (DefaultTableModel) ProveedoresjTable.getModel();
                int confirmado = JOptionPane.showConfirmDialog(BclienteEditar, 
                    "Â¿Confirma que desea modificar los datos del cliente seleccionado?");

                if (JOptionPane.OK_OPTION == confirmado){

                    try{
                        String nombre = ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),1).toString();
                        String direccion = ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),2).toString();
                        String email = ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),3).toString();
                        int cp = parseInt(ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),4).toString());
                        int tel = parseInt(ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),5).toString());
                        int dni= parseInt(ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),6).toString());
                        
                        if (GestorCliente.modificarCliente(valorCelda, nombre, direccion, email, cp, tel, dni)==true){
                            JOptionPane.showMessageDialog(null, "El cliente fue modificado");
                            borrarRenglones(1);
                            buscarMientrasEscribe();
                        }else{
                            JOptionPane.showMessageDialog(null, "No se pudo modificar el cliente");
                        }
                    }catch (NumberFormatException e){
                        JOptionPane.showMessageDialog(null, "Los campos no pueden ser nulos");
                    }
                }else{
                   System.out.println("no se modifico nada");
                }
            }
         }
    }

    private void agregarPagoCliente() {
        DefaultTableModel tabla = (DefaultTableModel) ProveedoresjTable.getModel();
        if (tabla.getRowCount()!=0){
            int idCliente=0;
            try{
                idCliente=parseInt(ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),0).toString());
            }catch (ArrayIndexOutOfBoundsException e){
                JOptionPane.showMessageDialog(jScrollPane2, "Seleccione un cliente");
            }
            if (idCliente!=0){
                String result = "";
                float cuota = 0;
                result = JOptionPane.showInputDialog(jScrollPane2, "Ingrese importe abonado");
                try{
                    cuota=parseFloat(result);
                }catch (NumberFormatException e){
                }catch (NullPointerException e){
                }

                if (cuota!=0){
                    try{
                        if(GestorPago.ingresarPago(idCliente, cuota, 1)){
                            float montoNuevo = (parseFloat(saldoCliente.getText().substring(7))*-1)-cuota;
                            String textoMonto=valueOf(montoNuevo).substring(0, valueOf(montoNuevo).indexOf(".")+2);
                            try{
                                textoMonto=valueOf(montoNuevo).substring(0, valueOf(montoNuevo).indexOf(".")+3);
                            }catch(StringIndexOutOfBoundsException e){
                            }
                            String textoPago = 
                                    "------------------------------\n\r" +
                                    "Se ha reducido la cta cte de: \n\r" +
                                    ProveedoresjTable.getValueAt(ProveedoresjTable.getSelectedRow(),1).toString() +
                                    "\n\ren $ " + valueOf(cuota) + " resta pagar: " + 
                                    textoMonto;

                            imprimirPago(textoPago);
                        }
                    }catch (NullPointerException e){
                        System.out.println("No hay cliente seleccionado");
                    }
                }
            }
        }
        clienteVentaPago();
        saldoCliente();
    }
    
    private boolean imprimirPago(String textoPago){
        boolean impresion = false;
        DocFlavor byar = DocFlavor.BYTE_ARRAY.AUTOSENSE;
        
        PrintService impresoraDefa = PrintServiceLookup.lookupDefaultPrintService();
        DocPrintJob trabajoImpresora = impresoraDefa.createPrintJob();
        
        String detalle = textoPago;
        
        String mostrar = detalle.replaceAll("Ã¡","a").replaceAll("Ã©", "e")
                .replaceAll("Ã­", "i").replaceAll("Ã³", "o").replaceAll("Ãº", "u")
                .replaceAll("Ã¼", "u").replaceAll("Ã±", "n");
                
        byte[] bytes = mostrar.getBytes();
        
        Doc doc = new SimpleDoc(bytes, byar, null);
        
        try {
            trabajoImpresora.print(doc, null);
            impresion = true;
        } catch (PrintException e) {
            System.out.println(e);
        }
        return impresion;
    }
}
