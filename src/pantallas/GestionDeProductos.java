/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantallas;

import entidades.Producto;
import gestores.Logs;
import java.awt.print.PrinterException;
import java.io.IOException;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ema
 */
public class GestionDeProductos extends javax.swing.JFrame {

    /**
     * Creates new form MenuDeGestionDeProductos
     */
    public GestionDeProductos() {
        AparienciaPantalla apa = new AparienciaPantalla();
        apa.cambiarApariencia("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gestionDeProductojPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DescripcionProdjTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        CodigoBarraProdjTextField = new javax.swing.JTextField();
        BuscarProductojButton = new javax.swing.JButton();
        AltaProdjButton = new javax.swing.JButton();
        EditarProdjButton = new javax.swing.JButton();
        DarDeBajaProdjButton = new javax.swing.JButton();
        ImprimirDetallejButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductosjTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion de productos");
        setExtendedState(GestionDeProductos.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Descripción");

        DescripcionProdjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DescripcionProdjTextFieldKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Código");

        BuscarProductojButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BuscarProductojButton.setText("Buscar");
        BuscarProductojButton.setToolTipText("");
        BuscarProductojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarProductojButtonActionPerformed(evt);
            }
        });

        AltaProdjButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AltaProdjButton.setText("Agregar producto");
        AltaProdjButton.setMaximumSize(new java.awt.Dimension(41, 41));
        AltaProdjButton.setMinimumSize(new java.awt.Dimension(41, 41));
        AltaProdjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AltaProdjButtonActionPerformed(evt);
            }
        });

        EditarProdjButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        EditarProdjButton.setText("Editar producto seleccionado");
        EditarProdjButton.setMaximumSize(new java.awt.Dimension(41, 41));
        EditarProdjButton.setMinimumSize(new java.awt.Dimension(41, 41));
        EditarProdjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarProdjButtonActionPerformed(evt);
            }
        });

        DarDeBajaProdjButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DarDeBajaProdjButton.setText("Dar de baja producto/s seleccionado/s");
        DarDeBajaProdjButton.setMaximumSize(new java.awt.Dimension(41, 41));
        DarDeBajaProdjButton.setMinimumSize(new java.awt.Dimension(41, 41));
        DarDeBajaProdjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DarDeBajaProdjButtonActionPerformed(evt);
            }
        });

        ImprimirDetallejButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ImprimirDetallejButton.setText("Imprimir");
        ImprimirDetallejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImprimirDetallejButtonActionPerformed(evt);
            }
        });

        ProductosjTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ProductosjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Codigo de Barra", "Descripción", "Stock", "Precio Unitario", "% ganancia", "Precio de venta", "Vencimiento", "Fecha de alta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductosjTable.getTableHeader().setReorderingAllowed(false);
        ProductosjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductosjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ProductosjTable);
        if (ProductosjTable.getColumnModel().getColumnCount() > 0) {
            ProductosjTable.getColumnModel().getColumn(2).setMinWidth(130);
            ProductosjTable.getColumnModel().getColumn(2).setPreferredWidth(150);
            ProductosjTable.getColumnModel().getColumn(3).setMinWidth(60);
            ProductosjTable.getColumnModel().getColumn(3).setPreferredWidth(70);
            ProductosjTable.getColumnModel().getColumn(3).setMaxWidth(90);
        }

        javax.swing.GroupLayout gestionDeProductojPanelLayout = new javax.swing.GroupLayout(gestionDeProductojPanel);
        gestionDeProductojPanel.setLayout(gestionDeProductojPanelLayout);
        gestionDeProductojPanelLayout.setHorizontalGroup(
            gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                .addGroup(gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DescripcionProdjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CodigoBarraProdjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BuscarProductojButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(AltaProdjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(EditarProdjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DarDeBajaProdjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 313, Short.MAX_VALUE)
                        .addComponent(ImprimirDetallejButton))
                    .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        gestionDeProductojPanelLayout.setVerticalGroup(
            gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                .addGroup(gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1))
                            .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                                .addComponent(CodigoBarraProdjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(DescripcionProdjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(gestionDeProductojPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(BuscarProductojButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(gestionDeProductojPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DarDeBajaProdjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EditarProdjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImprimirDetallejButton)
                    .addComponent(AltaProdjButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gestionDeProductojPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gestionDeProductojPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void ProductosjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductosjTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            abrirEditarProducto();
        }
    }//GEN-LAST:event_ProductosjTableMouseClicked

    private void ImprimirDetallejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImprimirDetallejButtonActionPerformed
        imprimir();
    }//GEN-LAST:event_ImprimirDetallejButtonActionPerformed

    private void DarDeBajaProdjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DarDeBajaProdjButtonActionPerformed
        // TODO add your handling code here:
        darDeBajaProductos();
    }//GEN-LAST:event_DarDeBajaProdjButtonActionPerformed

    private void EditarProdjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarProdjButtonActionPerformed
        // TODO add your handling code here:
        abrirEditarProducto();
    }//GEN-LAST:event_EditarProdjButtonActionPerformed

    private void AltaProdjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AltaProdjButtonActionPerformed
        // TODO add your handling code here:
        AltaProducto altaproducto = new AltaProducto();
        altaproducto.setTitle("Nuevo Producto");
        altaproducto.setVisible(true);
    }//GEN-LAST:event_AltaProdjButtonActionPerformed

    private void BuscarProductojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarProductojButtonActionPerformed
        // TODO add your handling code here:
        if (!CodigoBarraProdjTextField.getText().isEmpty()) {
            buscarPorCodigoDeBarra();
        } else if (!DescripcionProdjTextField.getText().isEmpty()) {
            buscarPorDescripcion();
        } else {
            agregarProductosATabla();
        }
    }//GEN-LAST:event_BuscarProductojButtonActionPerformed

    private void DescripcionProdjTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DescripcionProdjTextFieldKeyTyped
        // TODO add your handling code here:
        buscarPorDescripcion();
    }//GEN-LAST:event_DescripcionProdjTextFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionDeProductos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AltaProdjButton;
    private javax.swing.JButton BuscarProductojButton;
    private javax.swing.JTextField CodigoBarraProdjTextField;
    private javax.swing.JButton DarDeBajaProdjButton;
    private javax.swing.JTextField DescripcionProdjTextField;
    private javax.swing.JButton EditarProdjButton;
    private javax.swing.JButton ImprimirDetallejButton;
    private javax.swing.JTable ProductosjTable;
    private javax.swing.JPanel gestionDeProductojPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void limpiarTabla(JTable tabla) {
        int filas = tabla.getRowCount();
        if (filas > 0) {
            DefaultTableModel defaultTabla = (DefaultTableModel) tabla.getModel();
            for (int i = 0; filas > i; i++) {
                defaultTabla.removeRow(0);
            }
        }
    }

    private void agregarProductosATabla() {
        ArrayList<Producto> productos;
        try {
            productos = new Producto().listarProductos();
            if (!productos.isEmpty()) {
                limpiarTabla(ProductosjTable);
                DefaultTableModel tabla = (DefaultTableModel) ProductosjTable.getModel();
                Object[] columnas = new Object[9];
                for (int i = 0; i < productos.size(); i++) {
                    columnas[0] = productos.get(i).getIdProducto();
                    columnas[1] = productos.get(i).getCodigoBarra();
                    columnas[2] = productos.get(i).getDescripcionProducto();
                    columnas[3] = productos.get(i).getStock();
                    columnas[4] = productos.get(i).getPrecioUnitario();
                    columnas[5] = productos.get(i).getAlicuota();
                    double ganancia = productos.get(i).getPrecioUnitario() * productos.get(i).getAlicuota();
                    double precioVenta = productos.get(i).getPrecioUnitario() + ganancia;
                    columnas[6] = precioVenta;
                    columnas[7] = new SimpleDateFormat("dd-MM-yyyy").format(productos.get(i).getFechaVencimientoProducto());
                    columnas[8] = new SimpleDateFormat("dd-MM-yyyy").format(productos.get(i).getFechaAltaProducto());
                    tabla.addRow(columnas);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Aun no se ah cargado ningun producto, puede comezar por el boton agregar producto");
            }
        } catch (Exception e) {
            Logger.getLogger(GestionDeProductos.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void buscarPorCodigoDeBarra() {
        if (!CodigoBarraProdjTextField.getText().isEmpty()) {
            int codigobarra = Integer.parseInt(CodigoBarraProdjTextField.getText());
            try {
                ArrayList<Producto> productos = new Producto().obtenerProductosCodBarra(codigobarra);
                if (!productos.isEmpty()) {
                    limpiarTabla(ProductosjTable);
                    DefaultTableModel tabla = (DefaultTableModel) ProductosjTable.getModel();
                    Object[] columnas = new Object[9];
                    for (int i = 0; i < productos.size(); i++) {
                        columnas[0] = productos.get(i).getIdProducto();
                        columnas[1] = productos.get(i).getCodigoBarra();
                        columnas[2] = productos.get(i).getDescripcionProducto();
                        columnas[3] = productos.get(i).getStock();
                        columnas[4] = productos.get(i).getPrecioUnitario();
                        columnas[5] = productos.get(i).getAlicuota();
                        double ganancia = productos.get(i).getPrecioUnitario() * productos.get(i).getAlicuota();
                        double precioVenta = productos.get(i).getPrecioUnitario() + ganancia;
                        columnas[6] = precioVenta;
                        columnas[7] = new SimpleDateFormat("dd-MM-yyyy").format(productos.get(i).getFechaVencimientoProducto());
                        columnas[8] = new SimpleDateFormat("dd-MM-yyyy").format(productos.get(i).getFechaAltaProducto());
                        tabla.addRow(columnas);
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(GestionDeProductos.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }
    }

    private void buscarPorDescripcion() {
        if (!DescripcionProdjTextField.getText().isEmpty()) {
            String descripcion = DescripcionProdjTextField.getText();
            try {
                ArrayList<Producto> productos = new Producto().obtenerProductosDescripcion(descripcion);
                if (!productos.isEmpty()) {
                    limpiarTabla(ProductosjTable);
                    DefaultTableModel tabla = (DefaultTableModel) ProductosjTable.getModel();
                    Object[] columnas = new Object[9];
                    for (int i = 0; i < productos.size(); i++) {
                        columnas[0] = productos.get(i).getIdProducto();
                        columnas[1] = productos.get(i).getCodigoBarra();
                        columnas[2] = productos.get(i).getDescripcionProducto();
                        columnas[3] = productos.get(i).getStock();
                        columnas[4] = productos.get(i).getPrecioUnitario();
                        columnas[5] = productos.get(i).getAlicuota();
                        double ganancia = productos.get(i).getPrecioUnitario() * productos.get(i).getAlicuota();
                        double precioVenta = productos.get(i).getPrecioUnitario() + ganancia;
                        columnas[6] = precioVenta;
                        columnas[7] = new SimpleDateFormat("dd-MM-yyyy").format(productos.get(i).getFechaVencimientoProducto());
                        columnas[8] = new SimpleDateFormat("dd-MM-yyyy").format(productos.get(i).getFechaAltaProducto());
                        tabla.addRow(columnas);
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(GestionDeProductos.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }
    }

    private void abrirEditarProducto() {
        if (ProductosjTable.getSelectedRow() != -1) {
            int fila = ProductosjTable.getSelectedRow();
            int idProducto = (int) ProductosjTable.getValueAt(fila, 0);
            try {
                Producto producto = new Producto().obtenerProducto(idProducto);
                AltaProducto modProd = new AltaProducto();
                modProd.IDProductojTextField.setText(Integer.toString(producto.getIdProducto()));
                modProd.CodigoProductoJTextField.setText(Long.toString(producto.getCodigoBarra()));
                modProd.DescripcionProductojTextField.setText(producto.getDescripcionProducto());
                modProd.NombreProdJTextField.setText(producto.getNombreProducto());
                modProd.PrecioUniProdjTextField.setText(Double.toString(producto.getPrecioUnitario()));
                modProd.AlicuotaProdjTextField.setText(Double.toString(producto.getAlicuota()));
                modProd.StockProdjTextField.setText(Integer.toString(producto.getStock()));
                modProd.setTitle("Modificar Producto");
                modProd.setVisible(true);
            } catch (Exception e) {
                Logger.getLogger(GestionDeProductos.class.getName()).log(Level.SEVERE, e.getMessage(), e);
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe selecionar al menos una fila de la tabla para poder editar");
        }
    }

    private void darDeBajaProductos() {
        int resultados = 0;
        if (ProductosjTable.getSelectedRowCount() > 0) {
            int[] filas = ProductosjTable.getSelectedRows();
            for (int i = 0; i < filas.length; i++) {
                int idProducto = (int) ProductosjTable.getValueAt(filas[i], 0);
                try {
                    Producto producto = new Producto();
                    producto.setIdProducto(idProducto);
                    producto.setFechaBajaProducto(new Date());
                    if (producto.darDebajaProducto(producto) != 0) {
                        resultados++;
                    }
                } catch (Exception e) {
                    Logger.getLogger(GestionDeProveedores.class.getName()).log(Level.SEVERE, e.getMessage(), e);
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            }
            if (resultados == filas.length) {
                JOptionPane.showMessageDialog(null, "Se han dado de baja " + resultados + " productos");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar al menos una fila de la tabla para dar de baja");
        }
        try {
            Logs log = new Logs();
            log.crearLog("ha dado de baja un producto");
        } catch (IOException ex) {
            Logger.getLogger(AltaProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void imprimir() {
        int filas = ProductosjTable.getRowCount();
        if (filas > 0) {
            int stock = 0;
            for (int i = 0; i < filas; i++) {
                stock = stock + Integer.parseInt(ProductosjTable.getValueAt(i, 3).toString());
            }
            MessageFormat headerFormat = new MessageFormat("LISTADO DE PRODUCTOS");
            MessageFormat footerFormat = new MessageFormat("CANTIDAD DE PRODUCTOS: " + stock);
            try {
                ProductosjTable.print(JTable.PrintMode.NORMAL, headerFormat, footerFormat);
            } catch (PrinterException ex) {
                Logger.getLogger(GestionDeCompras.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Primero debe buscar un producto o listar todos");
        }
    }
}
