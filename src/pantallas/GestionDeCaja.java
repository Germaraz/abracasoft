/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantallas;

import entidades.Caja;
import entidades.Movimiento;
import entidades.Usuario;
import gestores.Logs;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ema
 */
public class GestionDeCaja extends javax.swing.JFrame {

    int idusuario;
    String nombreUsuario;
    private double importeApertura;

    /**
     * Creates new form MenuDeOperacionesDiarias
     */
    public GestionDeCaja() {
        AparienciaPantalla apa = new AparienciaPantalla();
        apa.cambiarApariencia("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DesdejDateChooser = new com.toedter.calendar.JDateChooser();
        HastajDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        ImpArqueojTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ImpCierrejTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        MontoToTalCajajTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        CajasjTable = new javax.swing.JTable();
        CierrejButton = new javax.swing.JButton();
        AperturajButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        FecAperturajTextField = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        NroCajajLabel = new javax.swing.JLabel();
        IDCajajTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        DetalleCajajTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Caja");
        setExtendedState(GestionDeCaja.MAXIMIZED_BOTH);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Controlar caja por periodo");

        DesdejDateChooser.setDateFormatString("dd-MM-yyyy");
        DesdejDateChooser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DesdejDateChooser.setDate(new Date());

        HastajDateChooser.setDateFormatString("dd-MM-yyyy");
        HastajDateChooser.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        HastajDateChooser.setDate(new Date());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Importe de Arqueo");

        ImpArqueojTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ImpArqueojTextField.setText("0.00");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Importe de cierre");

        ImpCierrejTextField.setEditable(false);
        ImpCierrejTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ImpCierrejTextField.setText("0.00");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Caja hasta el momento");

        MontoToTalCajajTextField.setEditable(false);
        MontoToTalCajajTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        MontoToTalCajajTextField.setText("0.00");
        MontoToTalCajajTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MontoToTalCajajTextFieldActionPerformed(evt);
            }
        });

        jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        CajasjTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CajasjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fecha", "Arqueo", "Cierre", "Usuario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CajasjTable.getTableHeader().setReorderingAllowed(false);
        CajasjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CajasjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(CajasjTable);

        CierrejButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CierrejButton.setText("Cerrar Caja");
        CierrejButton.setEnabled(false);
        CierrejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CierrejButtonActionPerformed(evt);
            }
        });

        AperturajButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AperturajButton.setText("Abrir Caja");
        AperturajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AperturajButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Hasta");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Desde");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Fecha de Apertura");

        FecAperturajTextField.setEditable(false);
        FecAperturajTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        FecAperturajTextField.setText(new SimpleDateFormat("dd-MM-yyyy").format(new Date()));

        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        NroCajajLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NroCajajLabel.setText("Nro de Caja");
        NroCajajLabel.setVisible(false);

        IDCajajTextField.setEditable(false);
        IDCajajTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IDCajajTextField.setVisible(false);

        DetalleCajajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Movimiento", "Monto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(DetalleCajajTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ImpArqueojTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                            .addComponent(FecAperturajTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AperturajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(NroCajajLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(IDCajajTextField)
                            .addComponent(ImpCierrejTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CierrejButton)
                        .addGap(42, 42, 42))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DesdejDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HastajDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MontoToTalCajajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(12, 12, 12))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FecAperturajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NroCajajLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IDCajajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ImpArqueojTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AperturajButton)
                    .addComponent(jLabel3)
                    .addComponent(ImpCierrejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CierrejButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MontoToTalCajajTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jButton3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(HastajDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(DesdejDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AperturajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AperturajButtonActionPerformed
        // TODO add your handling code here:
        if (validarArqueo()) {
            int respuesta = JOptionPane.showConfirmDialog(null, "�Abrir Caja?");
            if (respuesta == JOptionPane.YES_OPTION) {
                abrirCaja();
            }
        }
    }//GEN-LAST:event_AperturajButtonActionPerformed

    private void CierrejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CierrejButtonActionPerformed
        // TODO add your handling code here:
        if (validarCierre()) {
            int respuesta = JOptionPane.showConfirmDialog(null, "�Cerrar caja Nro:" + IDCajajTextField.getText() + "?");
            if (respuesta == JOptionPane.YES_OPTION) {
                cerrarCaja();
            }
        }
    }//GEN-LAST:event_CierrejButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        agregarCajasATabla();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void CajasjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CajasjTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            agregarMovimientosATabla();
        }
    }//GEN-LAST:event_CajasjTableMouseClicked

    private void MontoToTalCajajTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MontoToTalCajajTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MontoToTalCajajTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionDeCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionDeCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionDeCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionDeCaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionDeCaja().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AperturajButton;
    private javax.swing.JTable CajasjTable;
    private javax.swing.JButton CierrejButton;
    private com.toedter.calendar.JDateChooser DesdejDateChooser;
    private javax.swing.JTable DetalleCajajTable;
    private javax.swing.JTextField FecAperturajTextField;
    private com.toedter.calendar.JDateChooser HastajDateChooser;
    private javax.swing.JTextField IDCajajTextField;
    private javax.swing.JTextField ImpArqueojTextField;
    private javax.swing.JTextField ImpCierrejTextField;
    private javax.swing.JTextField MontoToTalCajajTextField;
    private javax.swing.JLabel NroCajajLabel;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void limpiarTabla(JTable tabla) {
        int filas = tabla.getRowCount();
        if (filas > 0) {
            DefaultTableModel defaultTabla = (DefaultTableModel) tabla.getModel();
            for (int i = 0; filas > i; i++) {
                defaultTabla.removeRow(0);
            }
        }
    }

    protected void validarCajaAbierta() {
        try {
            Caja caja = new Caja().obtenerCajaPorUsuario(idusuario);
            if (caja != null) {
                String fecha = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
                Date fechaCajaApertura = caja.getFechaApertura();
                Date fechaCajaCierre = caja.getFechaCierre();
                if (fechaCajaCierre == null && fechaCajaApertura != null) {
                    if (fechaCajaApertura.toString().equals(fecha)) {
                        FecAperturajTextField.setText(new SimpleDateFormat("dd-MM-yyyy").format(fechaCajaApertura));
                        ImpArqueojTextField.setText(Double.toString(Math.round(importeApertura)));
                        AperturajButton.setEnabled(false);
                        ImpArqueojTextField.setEditable(false);
                        NroCajajLabel.setVisible(true);
                        IDCajajTextField.setText(Integer.toString(caja.getIdCaja()));
                        IDCajajTextField.setVisible(true);
                        ImpCierrejTextField.setEditable(true);
                        CierrejButton.setEnabled(true);
                    } else {
                        FecAperturajTextField.setText(new SimpleDateFormat("dd-MM-yyyy").format(fechaCajaApertura));
                        ImpArqueojTextField.setText(Double.toString(Math.round(caja.getImporteArqueo())));
                        AperturajButton.setEnabled(false);
                        ImpArqueojTextField.setEditable(false);
                        NroCajajLabel.setVisible(true);
                        IDCajajTextField.setText(Integer.toString(caja.getIdCaja()));
                        IDCajajTextField.setVisible(true);
                        ImpCierrejTextField.setEditable(true);
                        CierrejButton.setEnabled(true);
                        JOptionPane.showMessageDialog(null, "Usted tiene una caja abierta pero no es del dia de la fecha. Por favor cierre la caja para poder continuar");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private boolean validarArqueo() {
        boolean valido = true;
        if (ImpArqueojTextField.getText().isEmpty() || ImpArqueojTextField.getText().equals("0.00")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un importe de arqueo de caja");
            ImpArqueojTextField.requestFocus();
            valido = false;
        }
        return valido;
    }

    private boolean validarCierre() {
        boolean valido = true;
        if (ImpCierrejTextField.getText().isEmpty() || ImpCierrejTextField.getText().equals("0.00")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un importe de cierre de caja");
            ImpCierrejTextField.requestFocus();
            valido = false;
        }
        return valido;
    }

    private void agregarCajasATabla() {
        ArrayList<Caja> cajas;
        try {
            cajas = new Caja().listarCajas(DesdejDateChooser.getDate(), HastajDateChooser.getDate());
            if (!cajas.isEmpty()) {
                limpiarTabla(CajasjTable);
                DefaultTableModel tabla = (DefaultTableModel) CajasjTable.getModel();
                Object[] columnas = new Object[5];
                for (int i = 0; i < cajas.size(); i++) {
                    columnas[0] = cajas.get(i).getIdCaja();
                    columnas[1] = new SimpleDateFormat("dd-MM-yyyy").format(cajas.get(i).getFechaApertura());
                    columnas[2] = cajas.get(i).getImporteArqueo();
                    columnas[3] = cajas.get(i).getImporteCierre();
                    columnas[4] = cajas.get(i).getUsuario().getNombreUsuario();
                    tabla.addRow(columnas);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No hay cajas entre ese rango de fechas");
            }
        } catch (Exception e) {
            Logger.getLogger(GestionDeProductos.class.getName()).log(Level.SEVERE, e.getMessage(), e);
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    private void agregarMovimientosATabla() {
        if (CajasjTable.getSelectedRow() != -1) {
            int filaSeleccionada = CajasjTable.getSelectedRow();
            ArrayList<Movimiento> movimientos;
            try {
                int idcaja = Integer.parseInt(CajasjTable.getValueAt(filaSeleccionada, 0).toString());
                movimientos = new Movimiento().listarMovimientoPorCaja(idcaja);
                if (!movimientos.isEmpty()) {
                    limpiarTabla(DetalleCajajTable);
                    DefaultTableModel tabla = (DefaultTableModel) DetalleCajajTable.getModel();
                    Object[] columnas = new Object[3];
                    for (int i = 0; i < movimientos.size(); i++) {
                        columnas[0] = movimientos.get(i).getIdMovimiento();
                        columnas[1] = movimientos.get(i).getDescripcionMovimiento();
                        columnas[2] = movimientos.get(i).getMontoMovimiento();
                        tabla.addRow(columnas);
                    }
                }
            } catch (Exception e) {
                Logger.getLogger(GestionDeProductos.class.getName()).log(Level.SEVERE, e.getMessage(), e);
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }

    private void abrirCaja() {
        int resultado;
        Caja caja = new Caja();
        caja.setImporteArqueo(Double.parseDouble(ImpArqueojTextField.getText()));
        try {
            caja.setUsuario(new Usuario().obtenerUsuario(idusuario));
            resultado = caja.abrirCaja(caja);
            if (resultado != 0) {
                importeApertura = Double.parseDouble(ImpArqueojTextField.getText());
                Movimiento mov = new Movimiento();
                mov.setCaja(new Caja().obtenerCaja(resultado));
                mov.setDescripcionMovimiento("ARQUEO CAJA: " + resultado);
                mov.setMontoMovimiento(importeApertura);
                if (mov.altaMovimiento(mov) != 0) {
                    AperturajButton.setEnabled(false);
                    ImpArqueojTextField.setEditable(false);
                    NroCajajLabel.setVisible(true);
                    IDCajajTextField.setText(Integer.toString(resultado));
                    IDCajajTextField.setVisible(true);
                    ImpCierrejTextField.setEditable(true);
                    CierrejButton.setEnabled(true);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se logro abrir la caja");
            }
        } catch (Exception ex) {
            Logger.getLogger(GestionDeCaja.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        try {
            Logs log = new Logs();
            log.user = nombreUsuario;
            log.crearLog("ha hecho apertura de caja");
        } catch (IOException ex) {
            Logger.getLogger(AltaProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
        limpiarTabla(CajasjTable);
        limpiarTabla(DetalleCajajTable);
        agregarCajasATabla();
    }

    private void cerrarCaja() {
        int resultado;
        Caja caja = new Caja();
        caja.setIdCaja(Integer.parseInt(IDCajajTextField.getText()));
        caja.setImporteCierre(Double.parseDouble(ImpCierrejTextField.getText()));
        try {
            resultado = caja.cerrarCaja(caja);
            if (resultado != 0) {
                Movimiento mov = new Movimiento();
                mov.setCaja(new Caja().obtenerCaja(resultado));
                mov.setDescripcionMovimiento("ARQUEO CAJA: " + resultado);
                mov.setMontoMovimiento(importeApertura);
                if (mov.altaMovimiento(mov) != 0) {
                    FecAperturajTextField.setText(new SimpleDateFormat("dd-MM-yyyy").format(new Date()));
                    ImpArqueojTextField.setText("0.00");
                    AperturajButton.setEnabled(true);
                    ImpArqueojTextField.setEditable(true);
                    NroCajajLabel.setVisible(false);
                    IDCajajTextField.setVisible(false);
                    ImpCierrejTextField.setEditable(false);
                    CierrejButton.setEnabled(false);
                    IDCajajTextField.setText("");
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se logro cerrar la caja");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        try {
            Logs log = new Logs();
            log.user = nombreUsuario;
            log.crearLog("ha hecho un cierre de caja");
        } catch (IOException ex) {
            Logger.getLogger(AltaProducto.class.getName()).log(Level.SEVERE, null, ex);
        }
        limpiarTabla(CajasjTable);
        limpiarTabla(DetalleCajajTable);
        agregarCajasATabla();
    }

    protected void importeDeCajaEnVivo() {
        if (!IDCajajTextField.getText().isEmpty()) {
            double totalEnCaja = 0;
            int idcaja = Integer.parseInt(IDCajajTextField.getText());
            try {
                ArrayList<Movimiento> movimientos = new Movimiento().listarMovimientoPorCaja(idcaja);
                if (!movimientos.isEmpty()) {
                    for (int i = 0; i < movimientos.size(); i++) {
                        totalEnCaja = totalEnCaja + movimientos.get(i).getMontoMovimiento();
                    }
                    MontoToTalCajajTextField.setText(Double.toString(Math.round(totalEnCaja * 100.0) / 100.0));
                }
            } catch (Exception ex) {
                Logger.getLogger(GestionDeCaja.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }
    }

}
